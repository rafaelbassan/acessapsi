{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Monorepo Structure with Turbo and Workspaces",
        "description": "Set up the foundational monorepo using Turbo and Yarn/NPM Workspaces, including directory structures for all applications (mobile, web-admin, web-public, backend) and shared packages (shared, ui, database) as per PRD section 2.2. Configure TypeScript for full-stack type safety.",
        "details": "// 1. Initialize a new project with Yarn or NPM.\n// 2. Configure workspaces in the root package.json: \"workspaces\": [\"apps/*\", \"packages/*\"]\n// 3. Create directory structure: apps/ (mobile, web-admin, web-public, backend) and packages/ (shared, ui, database).\n// 4. Initialize each app/package with its own package.json.\n// 5. Install Turbo: `yarn add turbo --dev -W` (or npm equivalent).\n// 6. Create a basic turbo.json configuration for build, lint, dev pipelines.\n// 7. Add basic build/lint/dev scripts to each app/package's package.json.\n// 8. Configure a root tsconfig.base.json and extend it in each package/app for TypeScript integration.",
        "testStrategy": "Run `turbo run build` and `turbo run lint` from the root. Verify successful execution. Create a simple shared utility in `packages/shared` and import it into one of the `apps/*` projects to test workspace linking and TypeScript path aliases.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Configure Basic Deployment Infrastructure on Firebase and Vercel",
        "description": "Set up initial projects and CI/CD pipelines on Firebase (for backend services like Auth, FCM) and Vercel (for Next.js web applications: web-admin, web-public).",
        "details": "// Firebase Setup: Create project, enable Authentication, FCM. Initialize Firebase CLI for potential backend functions.\n// Vercel Setup: Create Vercel projects for 'web-admin' and 'web-public', link to monorepo directories, configure Next.js build settings.\n// CI/CD (e.g., GitHub Actions): Create workflow files to deploy 'web-admin' & 'web-public' to Vercel, and 'backend' (if Firebase Functions) to Firebase on push to main/specific branches. Use Vercel CLI and Firebase CLI. Store secrets securely.",
        "testStrategy": "Deploy a minimal 'Hello World' version of `web-admin` and `web-public` to Vercel. If using Firebase Functions for backend, deploy a test function. Verify deployments are accessible via their respective URLs.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Design PostgreSQL Schema and Implement Initial Migrations",
        "description": "Define and implement the initial PostgreSQL database schema for core entities (Clínicas, Profissionais, Pacientes, Consultas, ProfessionalAvailability) using a migration tool (e.g., node-pg-migrate, Prisma Migrate) within the `packages/database` workspace. Include fields for soft delete and audit trails.",
        "details": "// In packages/database:\n// 1. Set up a migration tool.\n// 2. Define schemas with appropriate fields, types, relationships (FKs), and constraints for: Clinics, Professionals, Patients, Appointments, ProfessionalAvailability.\n// 3. Ensure all tables include `created_at`, `updated_at` (TIMESTAMPTZ with default NOW()), and `deleted_at` (TIMESTAMPTZ NULL for soft delete).\n// 4. Create initial migration files and scripts to apply/revert migrations.",
        "testStrategy": "Run migrations against a local/dev PostgreSQL instance. Verify table structures, relationships, data types, and constraints using a DB client (e.g., pgAdmin, DBeaver). Test rollback of migrations.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement Backend Authentication (JWT) and Role-Based Authorization",
        "description": "Develop JWT-based authentication and role-based authorization (Admin, Profissional, Paciente) for the Node.js backend API (Express/Fastify). This includes user registration/login endpoints and middleware for protecting routes.",
        "details": "// In apps/backend (Express/Fastify):\n// 1. Install `jsonwebtoken` and `bcrypt`.\n// 2. Create User model/table (e.g., `users` with `email`, `password_hash`, `role`, `profile_id` linking to Professionals/Patients).\n// 3. Implement `/auth/register` (for admins or seed script) and `/auth/login` endpoints.\n// 4. Login generates JWT (containing userId, role, exp) stored securely by client.\n// 5. Create authentication middleware to verify JWT and attach user to request.\n// 6. Create authorization middleware to check `req.user.role` against required roles for routes.",
        "testStrategy": "Unit tests for JWT generation/validation, password hashing. API endpoint tests for `/auth/login`, `/auth/register`. Test protected routes with valid/invalid/missing tokens and different user roles to verify authorization logic.",
        "priority": "high",
        "dependencies": [
          1,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Develop Backend CRUD APIs for Clinics, Professionals, and Patients",
        "description": "Implement RESTful/GraphQL API endpoints for Create, Read, Update, and Delete (soft delete) operations for Clínicas, Profissionais (including availability), and Pacientes. Include input validation and ensure audit trails.",
        "details": "// In apps/backend:\n// For each entity (Clinics, Professionals, Patients):\n// 1. Define routes (e.g., POST /professionals, GET /professionals, GET /professionals/:id, PUT /professionals/:id, DELETE /professionals/:id).\n// 2. Implement controllers/handlers with input validation (e.g., using Zod).\n// 3. Interact with PostgreSQL, ensuring soft deletes (set `deleted_at`) and filtering out deleted records by default.\n// 4. Manage `created_at`, `updated_at` timestamps.\n// 5. For Professionals, include endpoints to manage their availability (e.g., POST /professionals/:id/availability).",
        "testStrategy": "API integration tests for all CRUD operations on each entity. Verify correct data storage/retrieval, input validation errors, soft delete functionality, and role-based access controls.",
        "priority": "high",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Develop Backend CRUD APIs for Appointments (Consultas)",
        "description": "Implement API endpoints for managing appointments (Consultas), including creation, retrieval, updates (status, time), and cancellation. This involves checking professional availability and preventing conflicts.",
        "details": "// In apps/backend:\n// 1. Define routes for appointments (e.g., POST /appointments, GET /appointments, PUT /appointments/:id, DELETE /appointments/:id).\n// 2. Implement controllers/handlers with input validation.\n// 3. Business logic: Check professional availability (using ProfessionalAvailability data) before booking, prevent double bookings, handle status transitions (scheduled, confirmed, cancelled, completed).\n// 4. Interact with PostgreSQL, linking to Patients and Professionals.",
        "testStrategy": "API integration tests for booking (success/failure on conflict), updating status/time, cancelling, and retrieving appointments by various filters (patient, professional, date).",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Implement Backend Integration with WhatsApp Business API (Message Sending)",
        "description": "Set up and integrate the WhatsApp Business API (via a provider like Twilio or Meta Cloud API) to enable the backend to send pre-formatted messages, such as appointment confirmations or notifications from the clinic.",
        "details": "// In apps/backend:\n// 1. Choose and configure a WhatsApp Business API provider.\n// 2. Store API credentials securely.\n// 3. Create a service/module for WhatsApp communication (e.g., `sendWhatsAppMessage(toPhoneNumber, messageBodyOrTemplateId, params)`).\n// 4. Define message templates for key interactions (e.g., appointment confirmation).\n// 5. Integrate this service where needed (e.g., after clinic confirms an appointment in admin panel). Note: Patient-initiated flow is Task 15.",
        "testStrategy": "Unit tests for the WhatsApp service (mocking API provider). Integration test: Trigger an API endpoint that sends a WhatsApp message. Verify message receipt and content on a test WhatsApp account.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Email Sending via SMTP for Notifications",
        "description": "Integrate an SMTP service (e.g., SendGrid, Mailgun) to enable the backend to send transactional emails like appointment confirmations and reminders.",
        "details": "// In apps/backend:\n// 1. Choose and configure an SMTP provider.\n// 2. Store API keys/SMTP credentials securely.\n// 3. Install an email library (e.g., Nodemailer).\n// 4. Create an email service/module: `sendEmail(toEmail, subject, htmlBody, [textBody])`.\n// 5. Develop HTML email templates for appointment confirmations, reminders, etc.\n// 6. Integrate email sending into relevant flows (e.g., after appointment booking).",
        "testStrategy": "Unit tests for the email service (mocking SMTP transport). Integration test: Trigger an action that sends an email. Verify email receipt, content, and formatting in a test inbox.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Configure Backend for Sending Push Notifications via FCM",
        "description": "Configure the backend to send push notifications via Firebase Cloud Messaging (FCM) to the React Native mobile app, for events like appointment reminders. Includes storing device tokens.",
        "details": "// In apps/backend:\n// 1. Set up Firebase Admin SDK.\n// 2. Create schema/table to store user device tokens (user_id, device_token, device_type).\n// 3. Implement an API endpoint for mobile app to register/update device tokens (e.g., POST /users/device-token).\n// 4. Create a push notification service: `sendPushNotification(userId, title, body, [dataPayload])` which fetches tokens and uses Firebase Admin SDK to send messages.",
        "testStrategy": "API test for device token registration. Unit test for push notification service (mocking FCM). Integration test: Register a test device token, trigger a backend event to send a push notification, verify receipt on test device/emulator.",
        "priority": "medium",
        "dependencies": [
          2,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Develop Public Website (Next.js): Layout and Hero Section",
        "description": "Initialize the `web-public` Next.js (App Router) application. Implement the main layout (header/footer placeholders) and the Hero Section with logo, headline, CTAs, image placeholder, and contact info, ensuring responsiveness.",
        "details": "// In apps/web-public (Next.js 13+ App Router):\n// 1. Set up Next.js project, TypeScript, ESLint, Prettier.\n// 2. Create main layout (`app/layout.tsx`).\n// 3. Implement Hero Section (`app/page.tsx` or component) with specified elements: Logo, name, headline, CTAs ('Agendar Consulta', 'Conhecer Profissionais'), image, contact info.\n// 4. Style for responsiveness (e.g., Tailwind CSS, CSS Modules). Use `packages/ui` components if available.",
        "testStrategy": "Visual inspection across major browsers and screen sizes. Lighthouse audit for performance, accessibility, SEO. Functional testing of CTAs (links).",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Implement Content Sections for Public Website",
        "description": "Develop the remaining content sections for the `web-public` site: Sobre a Clínica, Profissionais (Destaque), Especialidades Oferecidas, Como Funciona o Agendamento, Informações Práticas (with map integration), Depoimentos. Fetch dynamic data where applicable.",
        "details": "// In apps/web-public:\n// Create React components for each section.\n// Populate with static content or fetch dynamic data from backend APIs (e.g., professionals list from Task 5).\n// - Sobre a Clínica: Mission/vision, differentiators, credibility numbers.\n// - Profissionais (Destaque): Photos, names, CRPs, specialities, ratings, links.\n// - Especialidades Oferecidas: Visual list with icons, descriptions.\n// - Como Funciona o Agendamento: 3-step process, highlight WhatsApp.\n// - Informações Práticas: Address, Google Maps integration, hours, contact.\n// - Depoimentos: 3-5 static testimonials.\n// Ensure responsiveness and accessibility (WCAG 2.1 AA).",
        "testStrategy": "Visual testing of each section on different devices. Content verification. Functional testing of links, map integration. Accessibility audit (e.g., Axe tools).",
        "priority": "medium",
        "dependencies": [
          5,
          10
        ],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement 'Sobre a Clínica' Section Component with Mock Data",
            "description": "Develop the 'Sobre a Clínica' React component for the `web-public` site. This section will display information about the clinic's mission, vision, differentiators, and credibility numbers using mock data.",
            "dependencies": [],
            "details": "Create a new React component named `SobreClinicaSection.tsx` in `apps/web-public`. Populate it with mock static content for mission/vision statements, key differentiators, and illustrative credibility numbers (e.g., years of experience, patients helped). Style the component using Tailwind CSS, ensuring it adheres to the established design system (as demonstrated in the Hero Section). Implement responsive design for desktop, tablet, and mobile views. Ensure compliance with WCAG 2.1 AA accessibility standards.\n<info added on 2025-06-25T20:18:24.631Z>\n✅ COMPLETED: About Section successfully implemented and running\n\n✅ Implementation completed:\n- Created AboutSection.tsx component with full responsive design\n- Mission and vision statements implemented\n- Key differentiators with checkmark icons\n- Statistics display (15+ years, 5+ professionals, 1000+ patients, 95% satisfaction)\n- Company values list with proper styling\n- Component integrated into main page\n\n✅ Technical verification:\n- Next.js dev server running successfully on port 3000\n- Fixed next.config.js warning by removing deprecated appDir\n- All TypeScript compilation successful\n- Component renders correctly with responsive design\n- Tailwind CSS styling working properly\n\n✅ User testing ready:\n- Server accessible at http://localhost:3000\n- Both Hero and About sections visible and functional\n- Ready for user testing and feedback\n</info added on 2025-06-25T20:18:24.631Z>",
            "status": "done",
            "testStrategy": "Perform visual inspection across various screen sizes (e.g., 320px, 768px, 1024px, 1440px). Use browser developer tools for responsiveness checks. Validate mock content display. Use accessibility audit tools (e.g., Axe DevTools, Lighthouse) to check for WCAG 2.1 AA compliance."
          },
          {
            "id": 2,
            "title": "Implement 'Profissionais (Destaque)' Section Component with Mock Data",
            "description": "Develop the 'Profissionais (Destaque)' React component. This section will showcase featured professionals using mock data for their photos, names, CRPs, specialities, ratings, and profile links.",
            "dependencies": [],
            "details": "Create `ProfissionaisDestaqueSection.tsx`. Design and implement a layout (e.g., a responsive grid of cards or a carousel) to display featured professionals. Populate with mock data for 3-4 professionals, including placeholder images, fictional names, example CRPs, lists of specialities, sample ratings (e.g., 4.5/5 stars), and placeholder links for 'View Profile' buttons. Style using Tailwind CSS, follow the existing design system, ensure responsiveness, and meet WCAG 2.1 AA accessibility standards.",
            "status": "pending",
            "testStrategy": "Test layout and content display on multiple devices/screen sizes. If a carousel is used, test its navigation and responsiveness. Verify all mock data fields are correctly displayed for each professional card. Conduct accessibility checks, paying attention to image alt texts and interactive element usability."
          },
          {
            "id": 3,
            "title": "Implement 'Especialidades Oferecidas' Section Component with Mock Data",
            "description": "Develop the 'Especialidades Oferecidas' React component. This section will present a visual list of specialities offered by the clinic, using mock data for icons and descriptions.",
            "dependencies": [],
            "details": "Create `EspecialidadesOferecidasSection.tsx`. Implement a visually engaging list or grid format (e.g., cards with icons) to display various specialities. Use mock data for speciality titles, brief descriptions, and placeholder icons (or use a consistent default icon if specific ones are not yet defined). Style with Tailwind CSS, adhere to the design system, ensure responsiveness across all devices, and comply with WCAG 2.1 AA standards.",
            "status": "pending",
            "testStrategy": "Visually verify the layout, mock content (titles, descriptions), and icon placeholders on different screen resolutions. Check for consistent styling. Perform accessibility testing, ensuring icons have appropriate alternative text or are treated as decorative if applicable."
          },
          {
            "id": 4,
            "title": "Implement 'Como Funciona o Agendamento' and 'Depoimentos' Section Components with Mock Data",
            "description": "Develop two React components: 'Como Funciona o Agendamento' to explain the booking process, and 'Depoimentos' to display client testimonials, both using mock static content.",
            "dependencies": [],
            "details": "1. For 'Como Funciona o Agendamento': Create `ComoFuncionaAgendamentoSection.tsx`. Display a clear 3-step process for scheduling appointments, highlighting WhatsApp as a primary contact method. Use mock static text and potentially simple illustrative icons or graphics for each step. \n2. For 'Depoimentos': Create `DepoimentosSection.tsx`. Display 3-5 mock static testimonials, including fictional author names/initials and their feedback. Consider a simple layout like a series of quote blocks or cards. \nBoth components must be styled with Tailwind CSS, be responsive, follow the established design system, and meet WCAG 2.1 AA accessibility standards.",
            "status": "pending",
            "testStrategy": "Review both sections visually on various devices. Verify the accuracy and clarity of the 3-step appointment process and the display of mock testimonials. Check for consistent styling and responsiveness. Conduct accessibility audits for both components."
          },
          {
            "id": 5,
            "title": "Implement 'Informações Práticas' Section Component with Map Placeholder",
            "description": "Develop the 'Informações Práticas' React component. This section will provide mock practical information (address, contact, hours) and include a placeholder for Google Maps integration.",
            "dependencies": [],
            "details": "Create `InformacoesPraticasSection.tsx`. Populate with mock static content for the clinic's physical address, phone number, email address, and opening hours. Integrate a clear placeholder for the Google Maps view (e.g., a static image of a map, or a styled `div` with text like 'Map will be displayed here'). Style the section using Tailwind CSS, ensure it aligns with the design system, is responsive on all devices, and complies with WCAG 2.1 AA standards.",
            "status": "pending",
            "testStrategy": "Verify correct display of mock address, contact details, and opening hours on different screen sizes. Check the appearance and responsiveness of the map placeholder. Ensure all text content is legible and accessible. Perform WCAG 2.1 AA compliance checks."
          }
        ]
      },
      {
        "id": 12,
        "title": "Develop Admin Panel: Layout, Auth, and Professionals Management",
        "description": "Initialize `web-admin` Next.js app. Implement admin layout, login page integrating with backend authentication (Task 4), and the 'Gestão de Profissionais' module (CRUD UI connected to APIs from Task 5).",
        "details": "// In apps/web-admin (Next.js 13+ App Router):\n// 1. Set up Next.js project.\n// 2. Implement login page calling backend `/auth/login`, storing JWT.\n// 3. Create protected layout for admin pages (sidebar, header), redirecting if not authenticated.\n// 4. 'Gestão de Profissionais' module: List professionals; forms for create/edit (name, CRP, specialities, availability, values, photo upload, bio); API calls to backend. Handle image uploads.",
        "testStrategy": "Functional testing: Admin login/logout, route protection. CRUD operations for professionals, verifying data persistence via API. Form validation.",
        "priority": "high",
        "dependencies": [
          1,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Implement Patient Management and Centralized Agenda in Admin Panel",
        "description": "Develop 'Gestão de Pacientes' (CRUD UI) and 'Agenda Centralizada' (view by day/week/month, create/edit/cancel appointments using a calendar library) in the `web-admin` panel, connected to backend APIs (Task 5 & 6).",
        "details": "// In apps/web-admin:\n// 1. 'Gestão de Pacientes' module: List, create, edit, view patient profiles (name, contact, history summary, notes). API calls to backend.\n// 2. 'Agenda Centralizada' module: Use a calendar library (e.g., FullCalendar). Fetch/display appointments. Filters (professional, speciality). UI for create/edit/cancel appointments. API calls to backend.",
        "testStrategy": "Functional testing: Patient CRUD. Calendar display, navigation, filters. Appointment actions (create, edit, cancel) reflecting in backend and calendar.",
        "priority": "medium",
        "dependencies": [
          6,
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Mobile App (Expo): Setup, Navigation, Clinic & Professionals Display",
        "description": "Initialize the React Native (Expo) mobile app (`apps/mobile`). Implement basic navigation (tabs/stack), Home screen (clinic info), Corpo Clínico screen (list professionals from API - Task 5), and client-side setup for push notifications (registering token with backend - Task 9).",
        "details": "// In apps/mobile (Expo/React Native):\n// 1. Initialize Expo project with TypeScript.\n// 2. Set up React Navigation (Tabs: Home, Profissionais, Agendamento, Perfil).\n// 3. Home Screen: Display clinic info (static or fetched).\n// 4. Corpo Clínico Screen: List professionals (photo, name, specialities, CRP) from backend API. Tap to view details (basic).\n// 5. Push Notifications: Install `expo-notifications`, request permissions, get FCM token, send to backend.",
        "testStrategy": "Run on iOS simulator and Android emulator. Test navigation. Verify clinic/professional data display. Test push notification token registration with backend.",
        "priority": "high",
        "dependencies": [
          1,
          5,
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Implement Mobile App WhatsApp Appointment Booking Flow",
        "description": "Implement the patient-facing appointment booking flow in the mobile app: select professional and available horário (fetched from backend - Task 6), generate a pre-formatted WhatsApp message, and redirect to WhatsApp for the patient to send.",
        "details": "// In apps/mobile:\n// 1. Professional Detail Screen: Show full details and available time slots (fetched from backend).\n// 2. Appointment Booking UI: Allow selection of professional and time slot.\n// 3. Message Generation: Construct pre-formatted WhatsApp message (e.g., \"Gostaria de agendar com [Profissional] para [Data] às [Hora].\").\n// 4. WhatsApp Redirection: Use `Linking.openURL(\"whatsapp://send?phone=\"+clinicPhoneNumber+\"&text=\"+encodedMessage)`.\n// 5. The clinic's WhatsApp number must be configurable.",
        "testStrategy": "Test on actual devices (iOS/Android): Select professional/time, verify correct message generation, verify redirection to WhatsApp with pre-filled message and clinic number. Ensure flow is intuitive.",
        "priority": "high",
        "dependencies": [
          6,
          7,
          14
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-25T19:11:36.462Z",
      "updated": "2025-06-25T20:18:30.977Z",
      "description": "Tasks for master context"
    }
  }
}